{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FRC Robotics - Panther Project!","text":"<p>Welcome to the team stinkers! This guide is for new members of our FRC robotics club.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":""},{"location":"#welcome","title":"Welcome","text":"<ul> <li>The basics of FIRST Robotics Competition (FRC)</li> <li>Safety and tools</li> <li>Programming, electronics, and CAD</li> <li>How to contribute to the team</li> </ul> <p>Stay curious, ask questions, and have fun!</p>"},{"location":"Build/","title":"Build The Bot!!","text":""},{"location":"Build/#nec-sacro-calamus-in-mensae-ubi","title":"Nec sacro calamus in mensae ubi","text":"<p>Lorem markdownum amentis lux bis deus sermonibus matri iaculatricemque evolat. De ossibus firmo. Maesta movensque risit herosmaxime ridet ignis tecta, socii ave praebebat causam ducitur, per eripiet habes,; vobis.</p> <ul> <li>Auctor in honor</li> <li>Induta repagula Claninque</li> <li>Delius citius in certi nec tenuit mea</li> <li>Auro vultumque nostro per Cepheus parata didicit</li> <li>Vices expulsumque hunc promittes inclusit ve post</li> <li>Opem Arachnes radix</li> </ul>"},{"location":"Build/#attenuatus-neque-pericula-lauru","title":"Attenuatus neque pericula lauru","text":"<p>Ore tenuit contemne liquores vineta exspirat. Ante sine lecta per haud nebulasque arcum exponit purpura.</p> <p>Vinci progeniem protinus senis, nitidum certa iugales, conpescuit Perseus neque pro loqui enim. Nec ut refert, tuus inquit; vos Creteque o gurgite aegram.</p>"},{"location":"Build/#laeter-tibi-contigit-percusso-sanguine-licentia-laboris","title":"Laeter tibi contigit percusso sanguine licentia laboris","text":"<p>Nolle necem, nec erroribus artus non nervi Canentem intellegit niveum amplexus at novas terris stagna nullamque. Puppes in torrentem euntem pervenerat, e exhausto Romana, fortia. Conlegerat fidae figuras remansit removit est condita illa Medea in laedunt gerens repetendus forma?</p> <p>Bubble Sort Logics (Potentially JavaScript)</p>"},{"location":"Build/#bubble-sort-logics-potentially-javascript","title":"Bubble Sort Logics (Potentially JavaScript)","text":""},{"location":"Build/#my-documentation","title":"My Documentation","text":"<pre><code>function greet(name) {\n    console.log(`Hello, ${name}!`);\n}\ngreet(\"World\");\n</code></pre>"},{"location":"Build/#gaudia-amnes-superesse-sanguine-phoce","title":"Gaudia amnes superesse sanguine Phoce","text":"<p>Urbem me quibus ad mihi, est radiis mihi. Acumina leto: iugo illic felix visum Melaneus, suoque res. Timorque vale conlegit mollierant pugnatque faecis, radicibus annos. Sic addere dictoque diversaque perveniunt terrae, enim, perque spretis, quam tibi petit.</p> <p>Vitare satis liventia pabula perbibit iacuit. Corpore bibit, bis missi spatium luminis sustinet vehit quaerensque in nunc populisque, non. Factas susurro mille, hac caput quamquam patrium, puerile longis confessasque male; aeacides. Ubi inponit geri: manum quae priores puerum.</p> <p>Fluctu in sedebat cursu ferarum cum habet aera defuit densas in inpius. Manus et error turbantes stratum, nec premit magna factus votis, marinae.</p>"},{"location":"CAD/","title":"FRC Design Learning Course","text":"<pre><code>print(\"Hello, world!\")\n</code></pre> <p>Welcome to the design learning course, the main purpose and content of the website! Keep in mind that it's always a work in progress, so if you find any issues or have difficulty understanding something, please reach out to a member!</p> <p>The purpose of the course is to take you from zero to being able to model a full robot. The content focuses on FRC-relevant features and tools, using engaging projects that not only introduce new CAD skills and practice old ones but also introduce engineering concepts. These projects gradually get less guided as you progress.</p> <p>!!! tip     Despite how it looks, Onshape is quite different in its fundamentals from other CAD software. Start at Stage 0A if you're switching from another CAD software or new to CAD, and Stage 1A if you already have some experience using Onshape. You will struggle with later stages if you don't have a solid grasp on the fundamentals of Onshape.</p> <p>!!! warning     If you choose to skip to Stage 0, make sure to add MKCAD and the required featurescripts for the learning course.</p> <p>!!! warning     Before starting, remember to take a look at the website feature guide to gain an understanding of the different features used throughout the learning course!</p> <p>{ .zoomable style=\"width:35%; float:left; margin-right:1rem;\" }</p>"},{"location":"CAD/#stage-0","title":"Stage 0","text":"<ul> <li>For people that haven't used CAD or Onshape before  </li> <li>Introduction to CAD to read or skim  </li> <li>Walkthrough to set up Onshape account and add necessary tools  </li> <li>Guide on navigating Onshape  </li> <li>Basic theory that helps develop a good mindset</li> </ul>"},{"location":"CAD/#stage-1","title":"Stage 1","text":"<ul> <li>Learn the fundamentals of sketching, part design, multi-part modeling, and assemblies through Onshape Learning Courses and FRC-relevant exercises  </li> <li>Learn about power transmission and modeling gearboxes  </li> <li>Model a swerve drivebase  </li> <li>Start learning top-down design workflow for FRC</li> </ul>"},{"location":"CAD/#stage-2","title":"Stage 2","text":"<ul> <li>Learn about common mechanisms in FRC and model them  </li> <li>Practice CAD skills until you're significantly more comfortable with Onshape  </li> <li>Learn engineering concepts and mechanism design  </li> <li>Learn layout sketches for different mechanisms</li> </ul>"},{"location":"CAD/#stage-3-under-construction","title":"Stage 3 (Under Construction)","text":"<ul> <li>Practice full robot main layout sketches  </li> <li>Replicate simple robots  </li> <li>Practice top-down workflow and integration</li> </ul>"},{"location":"CAD/#stage-4-under-construction","title":"Stage 4 (Under Construction)","text":"<ul> <li>Master mechanism design  </li> <li>Practice integration and workflow  </li> <li>Master practices that optimize load time and make collaboration easier  </li> <li>Study game history  </li> <li>Learn strategic design  </li> <li>Make more robots and mechanisms and get review and feedback</li> </ul>"},{"location":"gettingtoknow/","title":"Getting to know your XRP","text":""},{"location":"gettingtoknow/#booting-up-the-xrp","title":"Booting up the XRP","text":"<p>Upon start up (when power is applied to the XRP either via battery or USB), the following will happen:</p> <ol> <li> <p>The IMU will calibrate itself. This lasts approximately 3-5 seconds, and will be indicated by the green LED blinking rapidly. Ideally, the XRP should be placed on a flat surface prior to power up, and if necessary, users can hit the reset button to restart the firmware and IMU calibration process.</p> </li> <li> <p>The network will be configured, depending on the configuration settings. See the section on the Web UI for more information on how to configure the network settings. By default, the XRP will broadcast its own WiFi Access Point.</p> </li> <li> <p>After this, the XRP is ready for use.</p> </li> </ol>"},{"location":"gettingtoknow/#hardware-sensors-and-gpio","title":"Hardware, Sensors and GPIO","text":"<p>The XRP has the following built-in hardware/peripherals:</p> <ul> <li>2x geared drive motors with encoders</li> <li>2x additional geared motor connectors with encoder support (marked Motor3 and Motor4)</li> <li>2x Servo connectors (marked Servo1 and Servo2)</li> <li>1x Inertial Measurement Unit (IMU)</li> <li>1x LED (green)</li> <li>1x pushbutton (marked USER)</li> <li>1x Line following sensor (exposed as 2 Analog inputs)</li> <li>1x Ultrasonic PING style rangefinder (uses 2 digital IO pins, exposed as an analog input)</li> </ul>"},{"location":"gettingtoknow/#motors-wheels-and-encoders","title":"Motors, Wheels, and Encoders","text":"<p>The motors used on the XRP have a 48.75:1 gear reduction and a no-load output speed of 90 RPM at 4.5V.</p> <p>The wheels have a diameter of 60mm (2.3622\"). They have a trackwidth of 155mm (6.1\").</p> <p>The encoders are connected directly to the motor output shaft and have 12 Counts Per Revolution (CPR). With the provided gear ratio, this nets 585 counts per wheel revolution.</p> <p>The motor channels are listed in the table below.</p> <p>!!! note     We use \"motor channels\" here instead of \"PWM channels\" as the XRP requires the use of a special <code>XRPMotor</code> object in WPILib code to interact with the hardware.</p> Channel XRP Hardware Component XRPMotor 0 Left Motor XRPMotor 1 Right Motor XRPMotor 2 Motor 3 XRPMotor 3 Motor 4 <p>!!! note     The right motor will spin in a backward direction when positive output is applied. Thus the corresponding motor controller needs to be inverted in robot code.</p> <p>The servo channels are listed in the table below.</p> <p>!!! note     We use \"servo channels\" here instead of \"PWM channels\" as the XRP requires the use of a special <code>XRPServo</code> object in WPILib code to interact with the hardware.</p> Channel XRP Hardware Component XRPServo 4 Servo 1 XRPServo 5 Servo 2 <p>The encoder channels are listed in the table below.</p> Channel XRP Hardware Component DIO 4 Left Encoder Quadrature Channel A DIO 5 Left Encoder Quadrature Channel B DIO 6 Right Encoder Quadrature Channel A DIO 7 Right Encoder Quadrature Channel B DIO 8 Motor3 Encoder Quadrature Channel A DIO 9 Motor3 Encoder Quadrature Channel B DIO 10 Motor4 Encoder Quadrature Channel A DIO 11 Motor4 Encoder Quadrature Channel B <p>!!! note     By default, the encoders count up when the XRP moves forward.</p>"},{"location":"gettingtoknow/#inertial-measurement-unit","title":"Inertial Measurement Unit","text":"<p>The XRP includes an STMicroelectronics LSM6DSOX Inertial Measurement Unit (IMU) which contains a 3-axis gyro and a 3-axis accelerometer.</p> <p>The XRP will calibrate the gyro and accelerometer upon each boot (the onboard LED will quickly flash for about 3-5 seconds at startup time).</p>"},{"location":"gettingtoknow/#onboard-led-and-push-button","title":"Onboard LED and Push Button","text":"<p>The XRP has a push button (labeled USER) and a green LED onboard that are exposed as Digital IO (DIO) channels to robot code.</p> DIO Channel XRP Hardware Component DIO 0 USER Button DIO 1 Green LED <p>!!! note     DIO 2 and 3 are reserved for future system use.</p>"},{"location":"gettingtoknow/#line-following-reflectance-sensor","title":"Line Following (Reflectance) Sensor","text":"<p>When assembled according to the instructions, the XRP supports a line following sensor with 2 sensing elements. Each sensing element measures reflectance and exposes these as AnalogInput channels to robot code. The returned values range from 0V (pure white) to 5V (pure black).</p> AnalogInput Channel XRP Hardware Component AnalogInput 0 Left Reflectance Sensor --------------------- --------------------------- AnalogInput 1 Right Reflectance Sensor"},{"location":"gettingtoknow/#ultrasonic-rangefinder","title":"Ultrasonic Rangefinder","text":"<p>When assembled according to the instructions, the XRP supports an ultrasonic, PING style, rangefinder. This is exposed as an AnalogInput channel to robot code. The returned values range from 0V (20mm) to 5V (4000mm).</p> AnalogInput Channel XRP Hardware Component AnalogInput 2 Ultrasonic Rangefinder <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\npackage frc.robot;\n\nimport edu.wpi.first.wpilibj.RobotBase;\n\n/**\n * Do NOT add any static variables to this class, or any initialization at all. Unless you know what\n * you are doing, do not modify this file except to change the parameter class to the startRobot\n * call.\n */\npublic final class Main {\n  private Main() {}\n\n  /**\n   * Main initialization function. Do not perform any initialization here.\n   *\n   * &lt;p&gt;If you change your main robot class, change the parameter type.\n   */\n  public static void main(String... args) {\n    RobotBase.startRobot(Robot::new);\n  }\n}\n</code></pre> Copy"},{"location":"gettingtoknow/#code-is-cool","title":"Code is cool","text":""},{"location":"xrp-bot/","title":"XRP Bot Creation and Development","text":""},{"location":"xrp-bot/#introduction-to-xrp-bots","title":"Introduction to XRP Bots","text":"<p>XRP Bots are specialized robots designed for the FIRST Robotics Competition (FRC). In this section, you'll learn how to create and develop your own XRP bot using the latest tools and technology available to our team.</p>"},{"location":"xrp-bot/#key-components","title":"Key Components","text":"<ol> <li>Chassis</li> <li>The base structure of your robot.</li> <li> <p>It can be made from materials like aluminum or steel.</p> </li> <li> <p>Drive Train</p> </li> <li>This is the mechanism that allows your robot to move.</li> <li> <p>Common types: tank drive, mecanum, and swerve.</p> </li> <li> <p>Programming</p> </li> <li>Learn how to code your robot to make it do what you want.</li> <li> <p>We use Java or LabVIEW for programming FRC robots.</p> </li> <li> <p>Electronics</p> </li> <li> <p>Wiring and connecting all the components to the robot's control system.</p> </li> <li> <p>Sensors and Actuators</p> </li> <li>Use sensors like encoders, cameras, and gyros to gather data and control the robot.</li> <li>Actuators control movement, like motors and servos.</li> </ol>"},{"location":"xrp-bot/#building-your-xrp-bot","title":"Building Your XRP Bot","text":""},{"location":"xrp-bot/#put-build-here","title":"Put Build here","text":""},{"location":"xrp-bot/#getting-to-know-your-xrp-bot","title":"Getting to know your XRP bot","text":""},{"location":"xrp-bot/#go-to-getting-to-know-your-xrp-bot-page","title":"Go to Getting to know your XRP Bot Page","text":""}]}